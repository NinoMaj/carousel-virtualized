import * as PropTypes from 'prop-types';
import * as React from 'react';
import { Alignment } from '../../enums/Alignment';
import { ArrowStep } from '../../enums/ArrowStep';
declare type OnItemsRendered = ({ carouselName, eventName, overscanStartIndex, overscanStopIndex, visibleStartIndex, visibleStopIndex, }: {
    carouselName: string | undefined;
    eventName: string;
    overscanStartIndex: number;
    overscanStopIndex: number;
    visibleStartIndex: number;
    visibleStopIndex: number;
}) => any;
interface IRenderComponentProps<T> {
    data: T;
    index: number;
    isScrolling?: boolean;
    style: object;
}
declare type RenderComponent<T> = (props: IRenderComponentProps<T>) => React.ReactElement<any> | null;
declare type IArrowButton = ({ onClick, currentIndex, }: {
    onClick: any;
    currentIndex: number;
}) => any;
interface ICarouselVirtualizedProps {
    alignment?: Alignment;
    animationDuration?: number;
    arrowStep?: string | number;
    arrowStepOffset?: number;
    carouselName?: string;
    children: RenderComponent<unknown>;
    currentIndex?: number;
    disableAnimation?: boolean | number;
    disableMouseDrag?: boolean;
    disableTouchDrag?: boolean;
    enableKeyboard?: boolean;
    height?: string | number;
    initialScrollOffset?: number;
    innerClassName?: string;
    innerStyle?: object;
    itemCount: number;
    itemData?: any;
    itemSize?: number;
    leftArrow?: IArrowButton;
    onItemsRendered?: OnItemsRendered;
    outerClassName?: string;
    outerRef?: any;
    outerStyle?: object;
    overscanCount?: number;
    rightArrow?: IArrowButton;
    slideCount?: number;
    width?: number;
    wrapAround?: boolean;
    easing?(t: any): number;
    onAnimationComplete?(): unknown;
    onEvent?({ newIndex, eventName }: {
        newIndex: number;
        eventName: string;
    }): unknown;
}
interface ICarouselVirtualizedState {
    containerHeight: number | null;
    containerWidth: number | null;
    deltaX: number;
    eventName: string;
    isMounted: boolean;
    isMouseDragActive: boolean;
    isTouchDragActive: boolean;
    mouseIsMoving: boolean;
    startX: number;
}
interface ISlidesMoved {
    arrowClick?: boolean;
    arrowStep?: ArrowStep | number | string;
    arrowStepOffset?: number;
    deltaX?: number;
    itemSize: number;
    width?: number | null;
}
declare class CarouselVirtualized extends React.PureComponent<ICarouselVirtualizedProps, ICarouselVirtualizedState> {
    static propTypes: {
        alignment: PropTypes.Requireable<string>;
        animationDuration: PropTypes.Requireable<number>;
        arrowStep: PropTypes.Requireable<string | number>;
        arrowStepOffset: PropTypes.Requireable<number>;
        carouselName: PropTypes.Requireable<string>;
        children: PropTypes.Validator<(...args: any[]) => any>;
        currentIndex: PropTypes.Requireable<number>;
        disableAnimation: PropTypes.Requireable<number | boolean>;
        disableMouseDrag: PropTypes.Requireable<boolean>;
        disableTouchDrag: PropTypes.Requireable<boolean>;
        easing: PropTypes.Requireable<(...args: any[]) => any>;
        enableKeyboard: PropTypes.Requireable<boolean>;
        height: PropTypes.Requireable<string | number>;
        initialScrollOffset: PropTypes.Requireable<number>;
        innerClassName: PropTypes.Requireable<boolean>;
        innerStyle: PropTypes.Requireable<object>;
        itemCount: PropTypes.Validator<number>;
        itemData: PropTypes.Requireable<any>;
        itemSize: PropTypes.Requireable<number>;
        leftArrow: PropTypes.Requireable<(...args: any[]) => any>;
        onAnimationComplete: PropTypes.Requireable<(...args: any[]) => any>;
        onEvent: PropTypes.Requireable<(...args: any[]) => any>;
        onItemsRendered: PropTypes.Requireable<(...args: any[]) => any>;
        outerClassName: PropTypes.Requireable<string>;
        outerRef: PropTypes.Requireable<object>;
        outerStyle: PropTypes.Requireable<object>;
        overscanCount: PropTypes.Requireable<number>;
        rightArrow: PropTypes.Requireable<(...args: any[]) => any>;
        slideCount: PropTypes.Requireable<number>;
        width: PropTypes.Requireable<number>;
        wrapAround: PropTypes.Requireable<boolean>;
    };
    static defaultProps: {
        alignment: Alignment;
        animationDuration: number;
        arrowStep: number;
        arrowStepOffset: number;
        carouselName: string;
        currentIndex: number;
        disableAnimation: boolean;
        disableMouseDrag: boolean;
        disableTouchDrag: boolean;
        easing: (t: any) => number;
        enableKeyboard: boolean;
        height: number;
        initialScrollOffset: number;
        innerClassName: undefined;
        innerStyle: {};
        itemData: undefined;
        itemSize: undefined;
        leftArrow: () => void;
        onAnimationComplete: () => void;
        onEvent: () => void;
        onItemsRendered: () => void;
        outerClassName: undefined;
        outerRef: undefined;
        outerStyle: {};
        overscanCount: number;
        rightArrow: () => void;
        slideCount: undefined;
        width: undefined;
        wrapAround: boolean;
    };
    static slidesMoved({ arrowClick, arrowStep, arrowStepOffset, deltaX, itemSize, width, }: ISlidesMoved): number;
    private moveTimer;
    private containerRef;
    private carouselRef;
    private scrollOffsetInitial;
    private scrollOffsetFinal;
    private animationStartTime;
    private throttledResize;
    constructor(props: any);
    componentDidMount(): void;
    componentDidUpdate(prevProps: ICarouselVirtualizedProps): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private setContainerRefs;
    private shouldAnimate;
    private initAnimation;
    private animate;
    private calucateAlignmentOffSet;
    private setInitiallOffset;
    private onResize;
    private onThrottleResize;
    private onScroll;
    private handleKeyDown;
    private handleOnDragStart;
    private handleOnMouseMove;
    private handleOnMouseUp;
    private handleTouchStart;
    private handleTouchMove;
    private handleTouchEnd;
    private handleTouchCancel;
    private endTouchMove;
    private onDragStart;
    private onDragMove;
    private onDragEnd;
    private computeNextSlide;
    private boundScrollPosition;
    private boundIndex;
    private onEvent;
    private onItemsRendered;
    private scrollTo;
    private scrollToItem;
    private handleLeftArrowClick;
    private handleRightArrowClick;
    private readonly width;
    private readonly itemSize;
}
export { CarouselVirtualized };
